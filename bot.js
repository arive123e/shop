require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const puppeteer = require('puppeteer');

const token = process.env.TELEGRAM_BOT_TOKEN || '—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞';
const bot = new TelegramBot(token, { polling: true });
const CNY_TO_KZT = 70;

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–æ–±–∞–æ
async function parseTaobao(url) {
  let browser;
  try {
    browser = await puppeteer.launch({
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
      headless: true
    });
    const page = await browser.newPage();
    await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 35000 });

    // –ù–∞–∑–≤–∞–Ω–∏–µ
    const title = await page.title();

    // –¶–µ–Ω–∞
    let price = await page.evaluate(() => {
      // –ü–æ–∏—â–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
      let priceSel =
        document.querySelector('.price') ||
        document.querySelector('[class*=Price--priceInt]') ||
        document.querySelector('[class*=price] span');
      return priceSel ? priceSel.textContent.replace(/[^\d.]/g, '') : null;
    });

    // –§–æ—Ç–æ (–æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞)
    let photo = await page.evaluate(() => {
      // –ù–∞ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö Taobao ‚Äî –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ –æ–±—ã—á–Ω–æ –≤–æ—Ç —Ç–∞–∫:
      let imgEl =
        document.querySelector('.tb-main-pic img') ||
        document.querySelector('img[data-src]') ||
        document.querySelector('img');
      let src = imgEl ? (imgEl.src || imgEl.getAttribute('data-src')) : null;
      if (src && !src.startsWith('http')) src = 'https:' + src;
      return src;
    });

    // –í–∞—Ä–∏–∞–Ω—Ç—ã (—Ä–∞–∑–º–µ—Ä—ã, —Ü–≤–µ—Ç–∞ –∏ –¥—Ä.)
    let sizes = await page.evaluate(() => {
      let labelEls = Array.from(document.querySelectorAll('.tb-prop:not(.tb-hidden) .tb-prop-content a'));
      if (labelEls.length === 0) {
        labelEls = Array.from(document.querySelectorAll('[class*=sku] [class*=item]'));
      }
      return labelEls.map(el => el.innerText.trim()).filter(Boolean);
    });

    await browser.close();

    return {
      title,
      priceCny: price,
      priceKzt: price && !isNaN(+price) ? Math.round(Number(price) * CNY_TO_KZT) : '-',
      photo,
      sizes
    };
  } catch (e) {
    if (browser) await browser.close();
    console.error('–û—à–∏–±–∫–∞ Puppeteer:', e.message);
    return null;
  }
}

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  if (msg.text && msg.text.includes('taobao.com')) {
    bot.sendMessage(chatId, '‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...');
    const data = await parseTaobao(msg.text);
    if (!data) {
      bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ—Ä–∞–±–æ—á–∞—è –∏–ª–∏ Taobao –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
      return;
    }
    let sizes = data.sizes && data.sizes.length
      ? `\n\n<b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b> ${data.sizes.join(', ')}`
      : '';
    let message = `üì¶ <b>${data.title}</b>\n\n<b>–¶–µ–Ω–∞:</b> ${data.priceCny} ¬• (~${data.priceKzt} ‚Ç∏)${sizes}`;

    if (data.photo) {
      bot.sendPhoto(chatId, data.photo, { caption: message, parse_mode: 'HTML' });
    } else {
      bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    }
  } else {
    bot.sendMessage(chatId, 'üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å TaoBao, –∏ —è –ø–æ–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.');
  }
});
